import java.io.*;
import java.util.*;


////////////////////////////////////////////////////////////////
class App3
{


    public static void main(String[] args)
    {
        EasyIn easy = new EasyIn();
       
	
	System.out.println("\nWelcome to Graph App 4");
	System.out.println("========================\n");

        // Read Graph from File
	System.out.println("Enter Grid-Graph filename: ");
	Graph theGraph=new Graph(easy.readString());
	// Display the graph info
	theGraph.displayInfoGraph();
        // if Nvertex<=9, display the matrix
	if (theGraph.getnVertex()<=9) theGraph.displayAdjMat();
		    
	/// Prepare plot
	int n=Math.max(theGraph.getNx(),theGraph.getNy());
	StdDraw.setXscale(-1, n);          //  x scale
	StdDraw.setYscale(-1, n);          //  y scale
	
	/// Plot the main graph
	theGraph.plot("GRAY");

	/// Find the Tree (generated by either DFS/BFS ignoring weights or MSTW) 
	Graph tree=null;
	String pause;
	int command=-1;
	while (command!=0){
	    System.out.println("\nHow do you want to generate the Tree? (1:DFS, 2:BFS, 3:MSTW 0: Exit)?");
	    command=easy.readInt();
	    if ((command==1)||(command==2)) System.out.println("\nEnter the starting node number to start the search: ");
	    if (command==1) tree=theGraph.dfs(easy.readInt());     // call DFS algo
	    else if (command==2) tree=theGraph.bfs(easy.readInt());// call BFS algo
	    else if (command==3)  tree=theGraph.mstw();            // minimum spanning tree
	    else if (command==0) System.exit(0); // Leave the code

	    if (tree!=null){
		tree.displayInfoGraph(); //Display the graph info
		StdDraw.clear();  // clear the canvas
		tree.plot("BLUE");
	    
		System.out.println("\nPress return to continue");
		pause=easy.readString(); // make a pause
	    
		StdDraw.clear();  // clear the canvas
		theGraph.plot("GRAY"); // replot the original graph
	    }
	}	    
		   
    }
}


